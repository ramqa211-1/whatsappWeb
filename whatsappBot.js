const wppconnect = require('@wppconnect-team/wppconnect');
const axios = require('axios');
const fs = require('fs');

// ◊©◊ô◊û◊ï◊© ◊ë◊™◊ô◊ß◊ô◊ï◊™ ◊©◊ô◊© ◊ú◊†◊ï ◊î◊®◊©◊ê◊ï◊™ ◊¢◊ú◊ô◊î◊ü
const path = require('path');

// ◊†◊™◊ô◊ë ◊ê◊ó◊ì ◊ß◊ë◊ï◊¢ ◊ú◊õ◊ú ◊î◊û◊ô◊ì◊¢ ◊©◊¶◊®◊ô◊ö ◊ú◊©◊®◊ï◊ì ◊ë◊ô◊ü ◊î◊§◊¢◊ú◊ï◊™
const persistentDataPath = '/app/wpp-data';
// ◊©◊ô◊†◊ï◊ô ◊õ◊ê◊ü: ◊î◊í◊ì◊®◊™ sessionDir ◊ï-tokensDir ◊ú◊†◊™◊ô◊ë◊ô◊ù ◊ë◊®◊ï◊®◊ô◊ù ◊ô◊ï◊™◊®
const sessionDir = path.join(persistentDataPath, 'whatsapp-sessions'); // ◊™◊ô◊ß◊ô◊ô◊î ◊ô◊ô◊¢◊ï◊ì◊ô◊™ ◊ú-session
const tokensDir = path.join(persistentDataPath, 'tokens'); // ◊ê◊§◊©◊® ◊ú◊î◊©◊ê◊ô◊® ◊ê◊™ ◊î-tokens ◊ë◊†◊§◊®◊ì ◊ê◊ù ◊™◊®◊¶◊î, ◊ê◊ï ◊ú◊©◊ú◊ë ◊ê◊ï◊™◊ù

// ◊î◊¢◊®◊î: ◊ê◊ô◊ü ◊¶◊ï◊®◊ö ◊ë-sessionFile ◊õ◊û◊©◊™◊†◊î ◊†◊§◊®◊ì ◊ô◊ï◊™◊®, ◊î◊õ◊ú ◊ô◊ò◊ï◊§◊ú ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™ ◊¢"◊ô wppconnect ◊ë◊™◊ï◊ö sessionDir

console.log('üöÄ Starting WhatsApp bot setup');

try {
    // ◊ô◊¶◊ô◊®◊™ ◊™◊ô◊ß◊ô◊ï◊™ ◊ê◊ù ◊î◊ü ◊ú◊ê ◊ß◊ô◊ô◊û◊ï◊™
    fs.mkdirSync(sessionDir, { recursive: true }); // ◊ô◊¶◊ô◊®◊™ ◊î◊™◊ô◊ß◊ô◊ô◊î ◊î◊ó◊ì◊©◊î
    fs.mkdirSync(tokensDir, { recursive: true });
    console.log(`üìÅ Session directory ensured at: ${sessionDir}`);
    console.log(`üìÅ Tokens directory ensured at: ${tokensDir}`);
} catch (err) {
    console.error('‚ùå Failed to create directories:', err);
}

// ◊ë◊ì◊ô◊ß◊™ ◊ß◊ô◊ï◊ù session - ◊õ◊¢◊™ ◊†◊ë◊ì◊ï◊ß ◊ê◊ù ◊ô◊© ◊ß◊ë◊¶◊ô◊ù ◊õ◊ú◊©◊î◊ù ◊ë◊™◊ï◊ö ◊™◊ô◊ß◊ô◊ô◊™ ◊î-session
// ◊ì◊®◊ö ◊ß◊¶◊™ ◊ô◊ï◊™◊® ◊õ◊ú◊ú◊ô◊™ ◊ú◊ë◊ì◊ï◊ß ◊ê◊ù ◊ß◊ô◊ô◊ù session
if (fs.existsSync(sessionDir) && fs.readdirSync(sessionDir).length > 0) {
    console.log('‚úÖ Existing session data found in:', sessionDir);
} else {
    console.warn('‚ö†Ô∏è No session token found, will require QR scan');
}

// ◊ë◊ì◊ô◊ß◊™ ◊†◊™◊ô◊ë◊ô◊ù ◊ê◊§◊©◊®◊ô◊ô◊ù ◊ú◊õ◊®◊ï◊ù
function findChromePath() {
    const possiblePaths = [
        '/usr/bin/google-chrome-stable',
        '/usr/bin/google-chrome',
        '/usr/bin/chromium-browser',
        '/usr/bin/chromium',
        '/opt/google/chrome/chrome'
    ];

    for (const p of possiblePaths) { // ◊©◊ô◊†◊ô◊™◊ô ◊ê◊™ ◊©◊ù ◊î◊û◊©◊™◊†◊î ◊û-path ◊ú-p ◊õ◊ì◊ô ◊ú◊û◊†◊ï◊¢ ◊î◊™◊†◊í◊©◊ï◊™
        if (fs.existsSync(p)) {
            console.log(`‚úÖ Found Chrome at: ${p}`);
            return p;
        }
    }

    console.log('‚ö†Ô∏è Chrome not found in standard locations');
    return '/usr/bin/google-chrome-stable'; // default fallback
}

const chromePath = findChromePath();
console.log('üîß Initializing wppconnect...');

// *** ◊õ◊ê◊ü ◊û◊û◊ï◊ß◊ù ◊î-wppOptions ◊î◊û◊¢◊ï◊ì◊õ◊ü ◊©◊ú◊ö ◊¢◊ù ◊î◊†◊™◊ô◊ë◊ô◊ù ◊î◊ó◊ì◊©◊ô◊ù ***
const wppOptions = {
    session: 'default',
    // ◊õ◊ú ◊î◊û◊ô◊ì◊¢ ◊ô◊ô◊©◊û◊® ◊™◊ó◊™ ◊ê◊ï◊™◊ï ◊†◊™◊ô◊ë ◊ß◊ë◊ï◊¢
    sessionPath: sessionDir, // ◊û◊¶◊ë◊ô◊¢ ◊ú◊™◊ô◊ß◊ô◊ô◊î ◊î◊ó◊ì◊©◊î
    browserSessionTokenDir: tokensDir, // ◊ê◊§◊©◊® ◊ú◊î◊©◊ê◊ô◊® ◊ê◊™ ◊ñ◊î ◊õ◊ö ◊ê◊ï ◊ú◊î◊§◊†◊ï◊™ ◊ú-sessionDir
    catchQR: (base64Qrimg, asciiQR) => {
        console.log('üîë QR CODE GENERATED ‚Äî SCAN IT:\n', asciiQR);
    },
    headless: true,
    disableWelcome: true,
    logQR: true,
    executablePath: chromePath,
    browserArgs: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--no-zygote',
        '--single-process'
    ],
    puppeteerOptions: {
        executablePath: chromePath,
        // ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: Puppeteer ◊ô◊©◊û◊ï◊® ◊õ◊ê◊ü ◊ê◊™ ◊†◊™◊ï◊†◊ô ◊î◊û◊©◊™◊û◊© (◊õ◊ï◊ú◊ú ◊ß◊ë◊¶◊ô ◊î-session)
        userDataDir: sessionDir, // ◊û◊¶◊ë◊ô◊¢ ◊ú◊™◊ô◊ß◊ô◊ô◊™ ◊î-session ◊î◊ó◊ì◊©◊î
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor',
            '--no-zygote',
            '--single-process'
        ]
    }
};

console.log(`üîß Using browser: ${chromePath}`);

wppconnect.create(wppOptions)
    .then((client) => {
        console.log('ü§ñ WhatsApp client is ready and listening...');

        client.onMessage(async (message) => {
            console.log(`üì• Incoming message from ${message.from}:`, message.body);

            if (/docs\.google\.com\/spreadsheets/.test(message.body)) {
                console.log('üì© Google Sheets link detected, preparing to forward to n8n...');
                try {
                    await axios.post('https://primary-production-a35f4.up.railway.app/webhook-test/97866fe6-a0e4-487f-b21e-804701239ab0', {
                        message: message.body,
                        from: message.from,
                        chatName: message.chat?.name || '',
                        timestamp: message.timestamp,
                    });
                    console.log('‚úÖ Message forwarded to n8n successfully');
                } catch (err) {
                    console.error('‚ùå Failed to send message to n8n:', err.message);
                }
            }
        });
    })
    .catch((error) => {
        console.error('‚ùå Failed to initialize WhatsApp client:', error);
        process.exit(1);
    });